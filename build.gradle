/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.3/userguide/java_library_plugin.html
 */
 
plugins {
	id 'com.github.sherter.google-java-format' version '0.8'
}

// Apply the java-library plugin to add support for Java Library
apply plugin: 'java-library'
apply plugin: 'war'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
    maven { url 'https://dl.bintray.com/ethereum/maven/' }
}

googleJavaFormat {
	options style: 'AOSP'
	source = sourceSets*.allJava
	include '**/*.java'
	exclude '**/temp/*.java'
}

verifyGoogleJavaFormat {
	source = sourceSets*.allJava
	include '**/*.java'
	exclude '**/temp/*.java'
}

dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:23.0'
    implementation 'org.fisco-bcos:web3sdk:2.1.0.1008-SNAPSHOT'
    implementation 'javax.servlet:javax.servlet-api:3.1.0'
    implementation 'org.springframework:spring-webmvc:4.3.25.RELEASE'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.9.9.2'
    implementation 'org.slf4j:slf4j-log4j12:1.7.25'
    implementation 'org.springframework.boot:spring-boot-starter-web:1.5.9.RELEASE'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'
}

jar {
	destinationDir file('dist/apps')
	archiveName project.name + '.jar'
	exclude '**/*.xml'
	exclude '**/*.properties'

    doLast {
        copy {
            from file('src/main/resources/')
            into 'dist/conf'
        }
		copy {
			from configurations.runtime
			into 'dist/lib'
		}
		copy {
			from file('.').listFiles().findAll{File f -> (f.name.endsWith('.sh') || f.name.endsWith('.env'))}
			into 'dist'
		}
	}
}

war {
	webXml = file('src/main/resources/web.xml')
}